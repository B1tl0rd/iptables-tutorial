<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>SCTP Headers</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="Iptables Tutorial 1.2.2"
HREF="book1.htm"><LINK
REL="UP"
TITLE="TCP/IP repetition"
HREF="c171.htm"><LINK
REL="PREVIOUS"
TITLE="SCTP Characteristics"
HREF="x1535.htm"><LINK
REL="NEXT"
TITLE="TCP/IP destination driven 
routing"
HREF="x2836.htm"><LINK
REL="STYLESHEET"
TYPE="text/css"
HREF="table.css"></HEAD
><BODY
CLASS="SECTION"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Iptables Tutorial 1.2.2</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x1535.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 2. TCP/IP repetition</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x2836.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECTION"
><H1
CLASS="SECTION"
><A
NAME="SCTPHEADERS"
>SCTP Headers</A
></H1
><P
>This will be a very brief introduction to the SCTP
headers. SCTP has a lot of different types of
packets, and hence I will try to follow the RFC's as
close as possible and how they depict the different headers, starting with a
general overview of the headers applicable to all
SCTP packets.
      </P
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERGENERIC"
>SCTP Generic header format</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-generic-header.jpg"></P
></DIV
>
        </P
><P
>This is a generic overview of how a SCTP packet is 
laid out. Basically, you have a common header first with information describing 
the whole packet, and the source and destination ports etc. See more below for 
information on the common header.
	</P
><P
>After the common header a variable number of chunks are sent, up to the maximum 
possible in the MTU. All chunks can be bundled except 
for INIT, INIT ACK and 
SHUTDOWN COMPLETE, which must not be bundled. 
DATA chunks may be broken down to fit inside the 
MTU of the packets. 
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERCOMMON"
>SCTP Common and generic headers</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-common-header.jpg"></P
></DIV
>
        </P
><P
>Every SCTP packet contains the Common header as seen above. The header contains 
four different fields and is set for every SCTP packet.
	</P
><P
>Source port - bit 0-15. This field gives the source port of the packet, which 
port it was sent from. The same as for TCP and 
UDP source port.
	</P
><P
>Destination port - bit 16-31. This is the destination port of the packet, ie., 
the port that the packet is going to. It is the same as for the 
TCP and UDP destination port.
	</P
><P
>Verification Tag - bit 32-63. The verification tag is used to verify that the 
packet comes from the correct sender. It is always set to the same value as the 
value received by the other peer in the Initiate Tag during the 
association initialization, with a few exceptions:
	</P
><P
></P
><UL
><LI
><P
>An SCTP packet containing an 
INIT chunk must have the Verification tag set to 0.
            </P
></LI
><LI
><P
>A SHUTDOWN COMPLETE chunk with the 
T-bit set must have the verification tag copied from 
the verification tag of the SHUTDOWN-ACK chunk. 
            </P
></LI
><LI
><P
>Packets containing ABORT chunk may have the 
verification tag set to the same verification tag as the packet causing the 
ABORT.
            </P
></LI
></UL
><P
>Checksum - bit 64-95. A checksum calculated for the whole 
SCTP packet based on the 
Adler-32 algorithm. Read <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
>, appendix B for more information about this 
algorithm.
        </P
><DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunks-generic-fields.jpg"></P
></DIV
><P
>All SCTP chunks has a special layout that they all
adhere to as can be seen above. This isn't an actual header, but rather a
formalized way of how they do look. 
	</P
><P
>Type - bit 0-7. This field specifies the chunk type of the packet, for example
is it an INIT or SHUTDOWN
chunk or what? Each chunk type has a specific number, and is specified in the
image below. Here is a complete list of Chunk types:
	</P
><DIV
CLASS="TABLE"
><A
NAME="TABLE.SCTPTYPES"
></A
><P
><B
>Table 2-1. SCTP Types</B
></P
><TABLE
BORDER="1"
FRAME="border"
RULES="all"
CLASS="CALSTABLE"
><COL
WIDTH="56"><COL
WIDTH="1*"><THEAD
><TR
><TH
>Chunk Number</TH
><TH
>Chunk Name</TH
></TR
></THEAD
><TBODY
><TR
><TD
>0</TD
><TD
>Payload Data (DATA)</TD
></TR
><TR
><TD
>1</TD
><TD
>Initiation (INIT)</TD
></TR
><TR
><TD
>2</TD
><TD
>Initiation Acknowledgement (INIT ACK)</TD
></TR
><TR
><TD
>3</TD
><TD
>Selective Acknowledgement (SACK)</TD
></TR
><TR
><TD
>4</TD
><TD
>Heartbeat Request (HEARTBEAT)</TD
></TR
><TR
><TD
>5</TD
><TD
>Heartbeat Acknowledgement (HEARTBEAT ACK)</TD
></TR
><TR
><TD
>6</TD
><TD
>Abort (ABORT)</TD
></TR
><TR
><TD
>7</TD
><TD
>Shutdown (SHUTDOWN)</TD
></TR
><TR
><TD
>8</TD
><TD
>Shutdown Acknowledgement (SHUTDOWN ACK)</TD
></TR
><TR
><TD
>9</TD
><TD
>Operation Error (ERROR)</TD
></TR
><TR
><TD
>10</TD
><TD
>State Cookie (COOKIE ECHO)</TD
></TR
><TR
><TD
>11</TD
><TD
>Cookie Acknowledgement (COOKIE ACK)</TD
></TR
><TR
><TD
>12</TD
><TD
>Reserved for Explicit Congestion Notification Echo
(ECNE)</TD
></TR
><TR
><TD
>13</TD
><TD
>Reserved for Congestion Window Reduced (CWR)</TD
></TR
><TR
><TD
>14</TD
><TD
>Shutdown Complete (SHUTDOWN COMPLETE)</TD
></TR
><TR
><TD
>15-62</TD
><TD
>Reserved for IETF</TD
></TR
><TR
><TD
>63</TD
><TD
>IETF-defined chunk extensions</TD
></TR
><TR
><TD
>64-126</TD
><TD
>reserved to IETF</TD
></TR
><TR
><TD
>127</TD
><TD
>IETF-defined chunk extensions</TD
></TR
><TR
><TD
>128-190</TD
><TD
>reserved to IETF</TD
></TR
><TR
><TD
>191</TD
><TD
>IETF-defined chunk extensions</TD
></TR
><TR
><TD
>192-254</TD
><TD
>reserved to IETF</TD
></TR
><TR
><TD
>255</TD
><TD
>IETF-defined chunk extensions</TD
></TR
></TBODY
></TABLE
></DIV
><P
>Chunk Flags - bit 8-15. The chunk flags are generally not
used but are set up for future usage if nothing else. They are chunk specific
flags or bits of information that might be needed for the other peer.
According to specifications, flags are only used in
DATA, ABORT and
SHUTDOWN COMPLETE packets at this moment. This may
change however.
	</P
><DIV
CLASS="IMPORTANT"
><P
></P
><TABLE
CLASS="IMPORTANT"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="images/important.gif"
HSPACE="5"
ALT="Important"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>A lot of times when you read an RFC, you might run into some old proven
problems. The <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
> document
is one example of this, where they specifically specify that the Chunk flags
should always be set to 0 and ignored unless used for something. This is
written all over the place, and it begs for problems in the future. If you do
firewalling or routing, watch out very carefully for this, since specifications
for fields like this may change in the future and hence break at your firewall
without any legit reason. This happened before with the implementation of ECN
in the IP headers for example. See more in the <A
HREF="x430.htm"
><I
>IP headers</I
></A
> section of this chapter.
	  </P
></TD
></TR
></TABLE
></DIV
><P
>Chunk Length - bit 16-31. This is the chunk length
calculated in bytes. It includes all headers, including the chunk type, chunk
flags, chunk length and chunk value. If there is no chunk value, the chunk
length will be set to 4 (bytes).
	</P
><P
>Chunk Value - bit 32-n. This is specific to each chunk and
may contain more flags and data pertaining to the chunk type. Sometimes it
might be empty, in which case the chunk length will be set to 4. 
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERABORT"
>SCTP ABORT chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-abort-header.jpg"></P
></DIV
>
        </P
><P
>The ABORT chunk is used to abort an association as
previously described in the <A
HREF="x1535.htm#SCTPSHUTDOWN"
><I
>Shutdown and abort</I
></A
> section of this chapter.
ABORT is issued upon unrecoverable errors in the
association such as bad headers or data.
	</P
><P
>Type - bit 0-7. Always set to 6 for this chunk type.
	</P
><P
>Reserved - bit 8-14. Reserved for future chunk flags but not used as of writing
this. See the <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information about the chunk
flags field.
	</P
><P
>T-bit - bit 15. If this bit is set to 0, the sender had a
TCB associated with this packet that it
has destroyed. If the sender had no TCB the
T-bit should be set to 1.
	</P
><P
>Length - bit 16-31. Sets the length of the chunk in bytes including error
causes.
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERCOOKIE-ACK"
>SCTP COOKIE ACK chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-cookie-ack-header.jpg"></P
></DIV
>
        </P
><P
>The COOKIE ACK chunk is used during the initialization 
of the connection and never anywhere else in the connection. It must precede
all DATA and SACK chunks but 
may be sent in the same packet as the first of these packets.
	</P
><P
>Type - bit 0-7. Always set to 11 for this type.
	</P
><P
>Chunk flags - bit 8-15. Not used so far. Should always be set to 0 according to
<A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
>. You should always
watch out for this kind of specific behaviour stated by RFC's since it might
change in the future, and hence break your firewalls etc. Just the same as
happened with IP and ECN. See
the <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
>
section for more information.
	</P
><P
>Length - bit 16-31. Should always be 4 (bytes) for this chunk.
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERCOOKIE-ECHO"
>SCTP COOKIE ECHO chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-cookie-echo-header.jpg"></P
></DIV
>
        </P
><P
>The COOKIE ECHO chunk is used during the
initialization of the SCTP connection by the
initiating party to reply to the cookie sent by the responding party in
the State cookie field in the INIT
ACK packet. It may be sent together with
DATA chunks in the same packet, but must precede the
DATA chunks in such case.
	</P
><P
>Type - bit 0-7. The chunk type is always set to 10 for this chunk.
	</P
><P
>Chunk flags - bit 8-15. This field is not used today. The
RFC specifies that the flags should always be set to
0, but this might cause trouble as can be seen in the <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> section
above, specifically the Chunk flags explanation.
	</P
><P
>Length - bit 16-31. Specifies the length of the chunk, including type,
chunk flags, length and cookie fields in bytes.
	</P
><P
>Cookie - bit 32-n. This field contains the cookie as sent in the previous
INIT ACK chunk. It must be the exact same as the
cookie sent by the responding party for the other end to actually open the
connection. The <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
>
specifies that the cookie should be as small as possible to insure
interoperability, which is very vague and doesn't say much.
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERDATA"
>SCTP DATA chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-data-header.jpg"></P
></DIV
>
        </P
><P
>DATA chunks are used to send actual data through the
stream and have rather complex headers in some ways, but not really worse than
TCP headers in general. Each
DATA chunk may be part of a different stream, since
each SCTP connection can handle several different
streams. 
	</P
><P
>Type - bit 0-7. The Type field should always be set to 0 for DATA chunks.
	</P
><P
>Reserved - bit 8-12. Not used today. Might be applicable for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more
information.
	</P
><P
>U-bit - bit 13. The U-bit is used to indicate
if this is an unordered DATA chunk. If it is, the
Stream Sequence Number must be ignored by the
receiving host and send it on to the upper layer without delay or tries to
re-order the DATA chunks.
	</P
><P
>B-bit - bit 14. The B-bit is used to indicate
the beginning of a fragmented DATA chunk. If this bit
is set and the E (ending) bit is not set, it indicates that this is the first
fragment of a chunk that has been fragmented into several
DATA chunks. 
	</P
><P
>E-bit - bit 15. The E-bit is used to indicate
the ending of a fragmented DATA chunk. If this flag
is set on a chunk, it signals to the SCTP receiver
that it can start reassembling the fragments and pass them on to the upper
layer. If a packet has both the BE-bits set to set to
0, it signals that the chunk is a middle part of a fragmented chunk. If both
BE-bits are set to 1 it signals that the packet is
unfragmented and requires no reassembly et cetera.
	</P
><P
>Length - bit 16-31. The length of the whole DATA
chunk calculated in bytes,including the chunk type field and on until the end
of the chunk.
	</P
><P
>TSN - bit 32-63. The Transmission Sequence
Number (TSN) is sent in the
DATA chunk, and the receiving host uses the
TSN to acknowledge that the chunk got through
properly by replying with a SACK chunk. This is an
overall value for the whole SCTP association.
	</P
><P
>Stream Identifier - bit 64-79. The Stream
Identifier is sent along with the DATA
chunk to identify which stream the DATA chunk is
associated with. This is used since SCTP can
transport several streams within a single association.
	</P
><P
>Stream Sequence Number - bit 80-95. This is the sequence
number of the chunk for the specific stream identified by the
Stream Identifier. This sequence number is specific
for each stream identifier. If a chunk has been fragmented, the
Stream Sequence Number must be the same for all
fragments of the original chunk. 
	</P
><P
>Payload Protocol Identifier - bit 96-127.
This value is filled in by the upper layers, or applications using the
SCTP protocol as a way to identify to each other the
content of the DATA chunk. The field must always be
sent, including in fragments since routers and firewalls, et cetera, on the
way might need the information. If the value was set to 0, the value was not
set by the upper layers.
	</P
><P
>User data - bit 128-n. This is the actual data that the chunk is
transporting. It can be of variable length, ending on an even octet. It is the
data in the stream as specified by the stream sequence number n in the stream
S. 
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERERROR"
>SCTP ERROR chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-error-header.jpg"></P
></DIV
>
        </P
><P
>The ERROR chunk is sent to inform the other peer of
any problems within the current stream. Each ERROR
chunk can contain one or more Error Causes, which are
more specifically detailed in the <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
> document. I will not go into further details
here than the basic ERROR chunk, since it would be too
much information. The ERROR chunk is not fatal in and
of itself, but rather details an error that has happened. It may however be
used together with an ABORT chunk to inform the peer
of the error before killing the connection. 
	</P
><P
>Type - bit 0-7. This value is always set to 9 for
ERROR chunks. 
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Length - bit 16-31. Specifies the length of the chunk in bytes, including
all the Error Causes.
	</P
><P
>Error causes - bit 32-n. Each ERROR
chunk may contain one or more Error Causes, which
notifies the opposite peer of a problem with the connection. Each
Error Cause follows a specific format, as described
in the <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
> document. We
will not go into them here more than to say that they all contain an
Cause Code, cause length and cause specific
information field. The following Error Causes are
possible:
	</P
><DIV
CLASS="TABLE"
><A
NAME="TABLEERRORCAUSES"
></A
><P
><B
>Table 2-2. Error Causes</B
></P
><TABLE
BORDER="1"
FRAME="border"
RULES="all"
CLASS="CALSTABLE"
><COL
WIDTH="48"><COL
WIDTH="1*"><THEAD
><TR
><TH
>Cause Value</TH
><TH
>Chunk Code</TH
></TR
></THEAD
><TBODY
><TR
><TD
>1</TD
><TD
>Invalid Stream Identifier</TD
></TR
><TR
><TD
>2</TD
><TD
>Missing Mandatory Parameter</TD
></TR
><TR
><TD
>3</TD
><TD
>Stale Cookie Error</TD
></TR
><TR
><TD
>4</TD
><TD
>Out of Resource</TD
></TR
><TR
><TD
>5</TD
><TD
>Unresolvable Address</TD
></TR
><TR
><TD
>6</TD
><TD
>Unrecognized Chunk Type</TD
></TR
><TR
><TD
>7</TD
><TD
>Invalid Mandatory Parameter</TD
></TR
><TR
><TD
>8</TD
><TD
>Unrecognized Parameters</TD
></TR
><TR
><TD
>9</TD
><TD
>No User Data</TD
></TR
><TR
><TD
>10</TD
><TD
>Cookie Received While Shutting Down</TD
></TR
></TBODY
></TABLE
></DIV
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERHEARTBEAT"
>SCTP HEARTBEAT chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-heartbeat-header.jpg"></P
></DIV
>
        </P
><P
>The HEARTBEAT chunk is sent by one of the peers to
probe and find out if a specific SCTP endpoint address
is up. This is sent to the different addresses that was negotiated during the
initialization of the association to find out if they are all up.
	</P
><P
>Type - bit 0-7. The type is always set to 4 for
HEARTBEAT chunks.
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Length - bit 16-31. The length of the whole chunk, including the
Heartbeat Information TLV. 
	</P
><P
>Heartbeat Information TLV - bit 32-n. This
is a variable-length parameter as defined inside the <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
> document. This is a mandatory parameter for
the HEARTBEAT chunks that contains 3 fields, info
type = 1, info length and a sender-specific Heartbeat
Information parameter. The last field should be a sender-specific
information field of some kind, for example a timestamp when the heartbeat was
sent and a destination IP address. This is then returned in the
HEARTBEAT ACK chunk.
        </P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERHEARTBEAT-ACK"
>SCTP HEARTBEAT ACK chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-heartbeat-ack-header.jpg"></P
></DIV
>
        </P
><P
>The HEARTBEAT ACK is used to acknowledge that a
HEARTBEAT was received and that the connection is
working properly. The chunk is always sent to the same IP address as the
request was sent from. 
	</P
><P
>Type - bit 0-7. Always set to 5 for HEARTBEAT ACK
chunks. 
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Chunk length - bit 16-31. The length of the
HEARTBEAT ACK chunk including the
Heartbeat Information TLV, calculated in bytes. 
	</P
><P
>Heartbeat Information TLV - bit 32-n. This
field must contain the Heartbeat Information
parameter that was sent in the original HEARTBEAT
chunk. 
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERINIT"
>SCTP INIT chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-init-header.jpg"></P
></DIV
>
        </P
><P
>The INIT chunk is used to initiate a new association
with a destination host, and is the first chunk to be sent by the connecting
host. The INIT chunk contains several mandatory fixed
length parameters, and some optional variable length parameters. The fixed
length mandatory parameters are already in the above headers, and are the
Initiate Tag, Advertised Receiver Window
Credit, Number of Outbound Streams,
Number of Inbound Streams and the Initial
TSN parameters. After this comes a couple of optional parameters,
they will be listed with the optional parameters paragraph below.
	</P
><P
>Type - bit 0-7. The type field is always set to 1 for
INIT chunks. 
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Chunk Length - bit 16-31. The chunk length is the length of
the whole packet, including everything in the headers, including the optional
parameters.
	</P
><P
>Initiate Tag - bit 32-63. The Initiate
Tag is set within the INIT chunk and
must be used by the receiver to acknowledge all packets henceforth, within the
Verification Tag of the established association. The
Initiate Tag may take any value except 0. If the
value is 0 anyways, the receiver must react with an
ABORT. 
	</P
><P
>Advertised Receiver Window Credit (a_rwnd)- bit
64-95. This is the minimum receiving buffer that the sender of the
INIT chunk will allocate for this association, in
bytes. This can then be used by the receiver of the
a_rwnd, to know how much data it can send out without
being SACK'ed. This window should not be lessened,
but it might by sending the new a_rwnd in a SACK
chunk.
	</P
><P
>Number of Outbound Streams - bit 96-111. This specifies the maximum number of
outbound streams that the connecting host wishes to create to the receiving
host. The value must not be 0, and if it is, the receiving host should
ABORT the association immediately. There is no
negotiation of the minimum number of outbound
or inbound streams, it is simply set to the lowest that either host has set in
the header.
	</P
><P
>Number of Inbound Streams - bit 112-127.
Specifies the maximum number of inbound connections that the sending peer will
allow the receiving host to create in this association. This must not be set
to 0, or the receiving host should ABORT the
connection. There is no negotiation of the minimum number of outbound or
inbound streams, it is simply set to the lowest that either host has set in
the header.
	</P
><P
>Initial TSN - bit 128-159. This value sets the initial
Transmit Sequence Number
(TSN) that the sender will use when sending data. The
field may be set to the same value as the Initiate
Tag. 
	</P
><P
>On top of the above mandatory fixed length headers, there are also some
optional variable length parameters that might be set, and at least one of the
IPv4, IPv6 or
Hostname parameters must be set. Only one
Hostname may be set, and if a
Hostname is set, no IPv4 or
IPv6 parameters may be set. Multiple
IPv4 and IPv6 parameters may
also be set in the same INIT chunk. Also, none of
these parameters needs to be set in case the sender only has one address that
can be reached, which is where the chunk should be coming from. These
parameters are used to set up which addresses may be used to connect to the
other end of the association. This is a full list of all the parameters
available in the INIT chunk:
	</P
><DIV
CLASS="TABLE"
><A
NAME="TABLEINITPARAMETERS"
></A
><P
><B
>Table 2-3. INIT Variable Parameters</B
></P
><TABLE
BORDER="1"
FRAME="border"
RULES="all"
CLASS="CALSTABLE"
><COL
WIDTH="4*"><COL
WIDTH="2*"><COL
WIDTH="2*"><THEAD
><TR
><TH
>Parameter Name</TH
><TH
>Status</TH
><TH
>Type Value</TH
></TR
></THEAD
><TBODY
><TR
><TD
>IPv4 Address</TD
><TD
>Optional</TD
><TD
>5</TD
></TR
><TR
><TD
>IPv6 Address</TD
><TD
>Optional</TD
><TD
>6</TD
></TR
><TR
><TD
>Cookie Preservative</TD
><TD
>Optional</TD
><TD
>9</TD
></TR
><TR
><TD
>Host Name Address</TD
><TD
>Optional</TD
><TD
>11</TD
></TR
><TR
><TD
>Supported Address Types</TD
><TD
>Optional</TD
><TD
>12</TD
></TR
><TR
><TD
>Reserved for ECN Capable</TD
><TD
>Optional</TD
><TD
>32768</TD
></TR
></TBODY
></TABLE
></DIV
><P
>Below we describe the three most common Parameters used in the
INIT chunk.
	</P
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-init-param-ipv4-header.jpg"></P
></DIV
>
        </P
><P
>The IPv4 parameter is used to send an
IPv4 address in the INIT
chunk. The IPv4 address can be used to send data
through the association. Multiple IPv4 and
IPv6 addresses can be specified for a single
SCTP association. 
	</P
><P
>Parameter Type - bit 0-15. This is always set to 5 for
IPv4 address parameters. 
	</P
><P
>Length - bit 16-31. This is always set to 8 for IPv4
address parameters.
	</P
><P
>IPv4 Address - bit 32-63. This is an IPv4 address of
the sending endpoint. 
	</P
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-init-param-ipv6-header.jpg"></P
></DIV
>
        </P
><P
>This parameter is used to send IPv6 addresses in the
INIT chunk. This address can then be used to contact
the sending endpoint with this association.
	</P
><P
>Type - bit 0-15. Always set to 6 for the IPv6
parameters. 
	</P
><P
>Length bit 16-31. Always set to 20 for IPv6
parameters. 
	</P
><P
>IPv6 address - bit 32-159. This is an IPv6 address of
the sending endpoint that can be used to connect to by the receiving endpoint.
	</P
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-init-param-host-name-header.jpg"></P
></DIV
>
        </P
><P
>The Hostname parameter is used to send a single
hostname as an address. Thea receiving host must then look up the hostname and
use any and/or all of the addresses it receives from there. If a hostname
parameter is sent, no other IPv4,
IPv6 or Hostname parameters
may be sent.
	</P
><P
>Type - bit 0-15. This is always set to 11 for Hostname
Parameters.
	</P
><P
>Length - bit 16-31. The length of the whole parameter, including type, length
and hostname field. The Hostname field is variable
length. The length is counted in bytes.
	</P
><P
>Hostname - bit 32-n. A variable length parameter containing a hostname. The
hostname is resolved by the receiving end to get the addresses that can be used
to contact the sending endpoint. 
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERINIT-ACK"
>SCTP INIT ACK chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-init-ack-header.jpg"></P
></DIV
>
        </P
><P
>The INIT ACK chunk is sent in response to a
INIT chunk and contains basically the same headers,
but with values from the recipient of the original
INIT chunk. In addition, it has two extra variable
length parameters, the State Cookie and the
Unrecognized Parameter parameters.
	</P
><P
>Type - bit 0-7. This header is always set to 2 for INIT
ACK chunks. 
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Chunk Length - bit 16-31. The chunk length is the length of
the whole packet, including everything in the headers, and the optional
parameters.
	</P
><P
>Initiate Tag - bit 32-63. The receiver of the
Initiate Tag of the INIT ACK
chunk must save this value and copy it into the Verification
Tag field of every packet that it sends to the sender of the
INIT ACK chunk. The Initiate
Tag must not be 0, and if it is, the receiver of the
INIT ACK chunk must close the connection with an
ABORT. 
	</P
><P
>Advertised Receiver Window Credit (a_rwnd) - bit
64-95. The dedicated buffers that the sender of this chunk has located for
traffic, counted in bytes. The dedicated buffers should never be lowered to
below this value. 
	</P
><P
>Number of Outbound Streams - bit 96-111.
How many outbound streams that the sending host wishes to create. Must not be
0, or the receiver of the INIT ACK should
ABORT the association. There is no negotiation of the
minimum number of outbound or inbound streams, it is simply set to the lowest
that either host has set in the header.
	</P
><P
>Number of Inbound Streams - bit 112-127.
How many inbound streams that the sending endpoint is willing to accept. Must
not be 0, or the receiver of the INIT ACK should
ABORT the association. There is no negotiation of the
minimum number of outbound or inbound streams, it is simply set to the lowest
that either host has set in the header.
	</P
><P
>Initial TSN - bit 128-159. This is set to the
Initial Transmission Sequence Number
(I-TSN) which will be used by the sending party in
the association to start with.
	</P
><P
>After this point, the INIT ACK chunk continues with
optional variable-length parameters. The parameters are exactly the same as for
the INIT chunk, with the exception of the addition of
the State Cookie and the Unrecognized
Parameters parameter, and the deletion of the
Supported Address Types parameter. The list in other
words look like this:
	</P
><DIV
CLASS="TABLE"
><A
NAME="TABLEINITACKPARAMETERS"
></A
><P
><B
>Table 2-4. INIT ACK Variable Parameters</B
></P
><TABLE
BORDER="1"
FRAME="border"
RULES="all"
CLASS="CALSTABLE"
><COL
WIDTH="4*"><COL
WIDTH="2*"><COL
WIDTH="2*"><THEAD
><TR
><TH
>Parameter Name</TH
><TH
>Status</TH
><TH
>Type Value</TH
></TR
></THEAD
><TBODY
><TR
><TD
>IPv4 Address</TD
><TD
>Optional</TD
><TD
>5</TD
></TR
><TR
><TD
>IPv6 Address</TD
><TD
>Optional</TD
><TD
>6</TD
></TR
><TR
><TD
>State Cookie</TD
><TD
>Mandatory</TD
><TD
>7</TD
></TR
><TR
><TD
>Unrecognized Parameters</TD
><TD
>Optional</TD
><TD
>8</TD
></TR
><TR
><TD
>Cookie Preservative</TD
><TD
>Optional</TD
><TD
>9</TD
></TR
><TR
><TD
>Host Name Address</TD
><TD
>Optional</TD
><TD
>11</TD
></TR
><TR
><TD
>Reserved for ECN Capable</TD
><TD
>Optional</TD
><TD
>32768</TD
></TR
></TBODY
></TABLE
></DIV
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-init-ack-param-state-cookie-header.jpg"></P
></DIV
>
        </P
><P
>The State Cookie is used in INIT
ACK to send a cookie to the other host, and until the receiving
host has replied with a COOKIE ECHO chunk, the
association is not guaranteed. This is to prevent basically the same as a
SYN attack in TCP protocol. 
	</P
><P
>Type - bit 0-15. Always set to 7 for all State Cookie
parameters.
	</P
><P
>Length - bit 16-31. The size of the whole parameter, including the type, length
and State Cookie field in bytes.
	</P
><P
>State Cookie - bit 31-n. This parameter contains a cookie of variable length.
For a description on how this cookie is created, see the <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
> document. 
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERSACK"
>SCTP SACK chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-sack-header.jpg"></P
></DIV
>
        </P
><P
>The SACK chunk is used to tell the sender of
DATA chunks which chunks has been received and where
there has been a gap in the stream, based on the received
TSN's. Basically, the SACK
chunk acknowledges that it has received data up to a certain point (the
Cumulative TSN Ack parameter), and then adds
Gap Ack Blocks for all of the data that it has
received after the Cumulative TSN Ack point. A
SACK chunk must not be sent more than once for every
DATA chunk that is received.
	</P
><P
>Type - bit 0-7. This header is always set to 3 for
SACK chunks. 
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Chunk Length - bit 16-31. The chunk length is the length of
the whole chunk, including everything in the headers and all the parameters.
	</P
><P
>Cumulative TSN Ack - bit 32-63. This is the
Cumulative TSN Ack parameter, which is used to
acknowledge data. The DATA chunk receiver will use
this field to tell the sending host that it has received all data up to this
point of the association. After this point, all data that has not been
specifically acknowledged by the Gap Ack Blocks will,
basically, be considered unaccounted for. 
	</P
><P
>Advertised Receiver Window Credit (a_rwnd) - bit
64-95. The a_rwnd field is basically the same as the
a_rwnd in the INIT and
INIT ACK chunks, but can be used to raise or lower
the a_rwnd value. Please read more in the <A
HREF="a13413.htm#RFC2960"
><I
>RFC 2960 - Stream Control Transmission Protocol</I
></A
> document about this. 
        </P
><P
>Number of Gap Ack Blocks - bit 96-111. The number of
Gap Ack Blocks listed in this chunk. Each
Gap Ack Block takes up 32 bits in the chunk.
	</P
><P
>Number of Duplicate TSNs - bit 112-127. The number of
DATA chunks that has been duplicated. Each duplicated
TSN is listed after the Gap Ack
Blocks in the chunk, and each TSN takes
32 bits to send. 
	</P
><P
>Gap Ack Block #1 Start - bit 128-143. This is the first
Gap Ack Block in the SACK
chunk. If there are no gaps in the received DATA
chunk TSN numbers, there will be no Gap
Ack Blocks at all. However, if DATA
chunks are received out of order or some DATA chunks
where lost during transit to the host, there will be gaps. The gaps that has
been seen will be reported with Gap Ack Blocks. The
Gap Ack Block start point is calculated by adding the
Gap Ack Block Start parameter to the
Cumulative TSN value. The calculated value is the
start of the block. 
	</P
><P
>Gap Ack Block #1 End - bit 144-159. This value reports the end
of the first Gap Ack Block in the stream. All the
DATA chunks with the TSN
between the Gap Ack Block Start and the
Gap Ack Block End has been received. The
Gap Ack Block End value is added to the
Cumulative TSN, just as the Start parameter, to get
the actual last TSN of the block chunks to be
Acknowledged. 
	</P
><P
>Gap Ack Block #N Start - bits variable. For every
Gap Ack Block counted in the Number of
Gap Ack Blocks parameter, one Gap Ack
Block is added, until the final N block. Ie, if
Number of Gap Ack Blocks = 2, then there will be two
Gap Ack Blocks in the SACK
chunk. This is the last one simply, and contains the same type of value as the
Gap Ack Block #1 Start.
	</P
><P
>Gap Ack Block #N End - bits variable. Same as for the
Gap Ack Block #N End, but for the end of the gap. 
	</P
><P
>Duplicate TSN #1 - bits variable. These fields report a duplicate
TSN, in which case we have already received a
specific chunk, but receive the same TSN several
times more. This can either be router glitches (retransmitting already sent
data) or a case of retransmission from the sending endpoint, or a score of
other possibilities. Each instance of a duplicate TSN
should be reported once. For example, if 2 duplicate
TSN's has been received after acknowledging the first
one, each of these duplicate TSN's should be sent
sent in the next SACK message that is being sent. If
even more duplicate TSN's should appear after this
second SACK is sent, the new duplicates should be
added in the next SACK, and so on.
	</P
><P
>Duplicate TSN #X - bits variable. This is the last duplicate
TSN parameter, containing the same type of
information as the first parameter.
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERSHUTDOWN"
>SCTP SHUTDOWN chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-shutdown-header.jpg"></P
></DIV
>
        </P
><P
>The SHUTDOWN chunk is issued when one of the endpoints
of a connection wants to close the current association. The sending party must
empty all of its sending buffers before sending the
SHUTDOWN chunk, and must not send any more
DATA chunks afterwards. The receiver must also empty
its sending buffers and must then send the responding SHUTDOWN
ACK chunk. 
	</P
><P
>Type - bit 0-7. This header is always set to 7 for
SHUTDOWN chunks. 
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Chunk Length - bit 16-31. The chunk length is the length of
the whole packet, including the Cumulative TSN Ack
parameter. The length of the SHUTDOWN chunk should
always be 8.
	</P
><P
>Cumulative TSN Ack - bit 32-63. This is a Cumulative
TSN Ack field, just the same as in the
SACK chunk. The Cumulative TSN
Ack acknowledges the last TSN received
in sequence from the opposite endpoint. This parameter does not, nor can the
rest of the SHUTDOWN chunk either, acknowledge
Gap Ack Blocks. The lack of a Gap Ack
Block in the SHUTDOWN chunk that was
acknowledged before should not be interpreted as if the previously
acknowledged block was lost again.
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERSHUTDOWNACK"
>SCTP SHUTDOWN ACK chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-shutdown-ack-header.jpg"></P
></DIV
>
        </P
><P
>The SHUTDOWN ACK chunk is used to acknowledge a
SHUTDOWN chunk that has been received. Before the
SHUTDOWN ACK chunk is sent, all data in the sending
buffers should be sent, but the buffers must not accept any new data from the
application. SCTP does not support half-open
connections as TCP does. 
	</P
><P
>Type - bit 0-7. This header is always set to 8 for
SHUTDOWN ACK chunks. 
	</P
><P
>Chunk flags - bit 8-15. Not used today. Might be applicable
for change. See <A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for more information.
	</P
><P
>Chunk Length - bit 16-31. The chunk length is the length of
the whole chunk. The length of the SHUTDOWN ACK chunk
should always be 4.
	</P
></DIV
><DIV
CLASS="SECTION"
><H2
CLASS="SECTION"
><A
NAME="SCTPHEADERSHUTDOWNCOMPLETE"
>SCTP SHUTDOWN COMPLETE chunk</A
></H2
><P
>          <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/sctp-chunk-shutdown-complete-header.jpg"></P
></DIV
>
        </P
><P
>The SHUTDOWN COMPLETE chunk is sent, by the originating
host of the SHUTDOWN, in response to the
SHUTDOWN ACK chunk. It is sent to acknowledge that the
association is finally closed. 
	</P
><P
>Type - bit 0-7. Always set to 14 for SHUTDOWN COMPLETE
chunks.
	</P
><P
>Reserved - bit 8-14. Not used today. Might be applicable for change. See
<A
HREF="x1736.htm#SCTPHEADERCOMMON"
><I
>SCTP Common and generic headers</I
></A
> for
more information.
	</P
><P
>T-bit - bit 15. The T-bit is not set to signal
that the sending host had a Transmission Control
Block (TCB) associated with this
connection and that it destroyed. If the T-bit was
set, it had no TCB to destroy. 
	</P
><P
>Length - bit 16-31. This is always set to 4 for SHUTDOWN
COMPLETE chunks, since the chunk should never be any larger, as
long as no updates to the standards are made. 
	</P
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x1535.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x2836.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>SCTP Characteristics</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c171.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>TCP/IP destination driven 
routing</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>