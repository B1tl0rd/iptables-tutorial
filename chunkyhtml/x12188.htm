<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<HTML
><HEAD
><TITLE
>rc.DHCP.firewall.txt</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.79"><LINK
REL="HOME"
TITLE="Iptables Tutorial 1.2.2"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Example scripts"
HREF="c11777.htm"><LINK
REL="PREVIOUS"
TITLE="rc.DMZ.firewall.txt"
HREF="x12114.htm"><LINK
REL="NEXT"
TITLE="rc.UTIN.firewall.txt"
HREF="x12280.htm"><LINK
REL="STYLESHEET"
TYPE="text/css"
HREF="table.css"></HEAD
><BODY
CLASS="SECTION"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Iptables Tutorial 1.2.2</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="x12114.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 14. Example scripts</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x12280.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECTION"
><H1
CLASS="SECTION"
><A
NAME="RCDHCPFIREWALLTXT"
>rc.DHCP.firewall.txt</A
></H1
><P
> 
     <DIV
CLASS="MEDIAOBJECT"
><P
><IMG
SRC="images/rc_DHCP_firewall.jpg"></P
></DIV
>
    </P
><P
>The <A
HREF="http://iptables-tutorial.frozentux.net/scripts/rc.DHCP.firewall.txt"
TARGET="_top"
>rc.DHCP.firewall.txt</A
> script is pretty much identical to the original
<A
HREF="x12074.htm"
><I
>rc.firewall.txt</I
></A
>. However,
this script no longer uses the STATIC_IP variable, which is
the main change to the original rc.firewall.txt script. The reason is that
this won't work together with a dynamic IP connection. The actual changes
needed to be done to the original script are minimal, however, I've had some
people mail me and ask about the problem so this script will be a good
solution for you. This script will allow people who uses
DHCP, PPP and
SLIP connections to connect to the Internet.</P
><P
>    The <TT
CLASS="FILENAME"
>rc.DHCP.firewall.txt</TT
> script requires the following
options to be compiled statically to the kernel, or as modules, as a bare
minimum to run properly.
    </P
><P
></P
><UL
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_NETFILTER
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_CONNTRACK
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_IPTABLES
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_MATCH_LIMIT
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_MATCH_STATE
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_FILTER
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_NAT
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_TARGET_MASQUERADE
      </P
></LI
><LI
STYLE="list-style-type: opencircle"
><P
>      CONFIG_IP_NF_TARGET_LOG
      </P
></LI
></UL
><P
>The main changes done to the script consist of erasing the
<CODE
CLASS="VARNAME"
>STATIC_IP</CODE
> variable as I already said and deleting all
references to this variable. Instead of using this variable the script now 
does its main filtering on the variable <CODE
CLASS="VARNAME"
>INET_IFACE</CODE
>. In
other words -d $STATIC_IP has been changed to -i
$INET_IFACE. This is pretty much the only change made and that's all
that's needed really.
    </P
><P
>There are some more things to think about though. We can no longer filter in the
INPUT chain depending on, for example,
--in-interface $LAN_IFACE --dst $INET_IP. This in turn forces
us to filter only based on interfaces in such cases where the internal machines
must access the Internet addressable IP. One great example is if we are
running an HTTP on our firewall. If we go to the main
page (i.e., http://192.168.0.1/), which contains static links back to the same 
host (i.e., http://foobar.dyndns.net/fuubar.html), which could be some dyndns 
solution, we would get a minor problem. The
NATed box would ask the DNS
for the IP of the HTTP server, then try to access
that IP. In case we filter based on interface and IP, the
NATed box would be unable to get to the
HTTP because the INPUT chain
would DROP the packets flat to the ground. This also
applies in a sense to the case where we got a static IP, but in such cases it
could be gotten around by adding rules which check the
LAN interface packets for our
<CODE
CLASS="VARNAME"
>INET_IP</CODE
>, and if so ACCEPT them.
    </P
><P
>As you may read from above, it may be a good idea to get a script, or
write one, that handles dynamic IP in a better sense. We could for example
make a script that grabs the IP from ifconfig and adds it to
a variable, upon boot-up of the Internet connection. A good way to do this, 
would be to use, for example, the <TT
CLASS="FILENAME"
>ip-up</TT
> scripts provided
with pppd and some other programs. For a good site, check
out the linuxguruz.org iptables site which has a huge collection of scripts
available to download. You will find a link to the linuxguruz.org site from
the <A
HREF="a13413.htm"
><I
>Other resources and links</I
></A
>
appendix.     </P
><DIV
CLASS="NOTE"
><P
></P
><TABLE
CLASS="NOTE"
WIDTH="100%"
BORDER="0"
><TR
><TD
WIDTH="25"
ALIGN="CENTER"
VALIGN="TOP"
><IMG
SRC="images/note.gif"
HSPACE="5"
ALT="Note"></TD
><TD
ALIGN="LEFT"
VALIGN="TOP"
><P
>This script might be a bit less secure than the
<TT
CLASS="FILENAME"
>rc.firewall.txt</TT
> script. I would definitely advise you to
use that script if at all possible since this script is more open to attacks
from the outside.
     </P
></TD
></TR
></TABLE
></DIV
><P
>    Also, there is the possibility to add something like this to your scripts:
    </P
><PRE
CLASS="SCREEN"
>INET_IP=`ifconfig $INET_IFACE | grep inet | cut -d : -f 2 | \
cut -d ' ' -f 1`
    </PRE
><P
>    The above would automatically grab the IP address
of the $INET_IFACE variable, grep the correct line which
contains the IP address and then cuts it down
to a manageable IP address. For a more
elaborate way of doing this, you could apply the snippets of code available
within the <A
HREF="scripts/retrieveip.txt"
TARGET="_top"
>retreiveip.txt</A
> script,
which will automatically grab your Internet IP address when you run the script.
Do note that this may in turn lead to a little bit of "weird" behavior, such
as stalling connections to and from the firewall on the internal side. The
most common strange behaviors are described in the following list.

    </P
><P
></P
><OL
TYPE="1"
><LI
><P
>      If the script is run from within a script which in turn is executed by,
for example, the PPP daemon, it will hang all currently
active connections due to the NEW not SYN rules (see the <A
HREF="x12721.htm"
><I
>State NEW packets but no SYN bit set</I
></A
> section). It is possible
to get by, if you get rid of the NEW not SYN rules for
example, but it is questionable.
      </P
></LI
><LI
><P
>     If you got rules that are static and always want to be around, it is
rather harsh to add and erase rules all the time, without hurting the already
existing ones. For example, if you want to block hosts on your
LAN to connect to the firewall, but at the same time
operate a script from the PPP daemon, how would you do
it without erasing your already active rules blocking the
LAN?

      </P
></LI
><LI
><P
>     It may get unnecessarily complicated, as seen above which, in turn, could
lead to security compromises. If the script is kept simple, it is easier to spot
problems, and to keep order in it.
      </P
></LI
></OL
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="x12114.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x12280.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>rc.DMZ.firewall.txt</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c11777.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>rc.UTIN.firewall.txt</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>