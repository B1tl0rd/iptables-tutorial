 <chapter id="examplescripts">
  <title id="examplescripts.title">Example scripts</title>

  <para>
The objective of this chapter is to give a fairly brief and short explanation of
each script available with this tutorial, and to provide an overlook of the
scripts and what services they provide. These scripts are not in any way
perfect, and they may not fit your exact intentions perfectly. It is in other
words up to you to make these scripts suitable for your needs. The rest of this
tutorial should most probably be helpful in making this feat. The first section
of this tutorial deals with the actual structure that I have established in each
script so we may find our way within the script a bit easier.
  </para>

  &scriptexplanation;

   <section id="rcfirewalltxt">
    <title id="rcfirewalltxt.title">rc.firewall.txt</title>

     <para> 
     <mediaobject>
      <imageobject>
       <imagedata fileref="images/rc_firewall.eps" format="eps">
      </imageobject>
      <imageobject>
       <imagedata fileref="images/rc_firewall.jpg" format="jpg">
      </imageobject>
     </mediaobject>
    </para>

    <para>
The <ulink
url="http://iptables-tutorial.frozentux.net/scripts/rc.firewall.txt">rc.firewall.txt</ulink>
 script is the main core on which the rest of the scripts are based upon. The
<link linkend="rcfirewallfile" endterm="rcfirewallfile.title"></link>
chapter should explain every detail in the script most thoroughly. Mainly it was
written for a dual homed network. For example, where you have one
<systemitem>LAN</systemitem> and one Internet Connection. This script also makes
the assumption that you have a static IP to the Internet, and hence don't use
<systemitem>DHCP</systemitem>, <systemitem>PPP</systemitem>,
<systemitem>SLIP</systemitem>or some other protocol that assigns you an IP
automatically. If you are looking for a script that will work with those setups,
please take a closer look at the <link linkend="rcDHCPfirewalltxt"
endterm="rcDHCPfirewalltxt.title"></link> script.
    </para>

    <para>
    The <filename>rc.firewall.txt</filename> script requires the following
options to be compiled statically to the kernel, or as modules. Without one or
more of these, the script will become more or less flawed since parts of the
scripts required functionalities will be unusable. As you change the script you
use, you could possibly need more options to be compiled into your kernel
depending on what you want to use.
    </para>

    <itemizedlist mark="opencircle">
     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_NETFILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_CONNTRACK
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_IPTABLES
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_LIMIT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_STATE
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_FILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_NAT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_TARGET_LOG
      </para>
     </listitem>
    </itemizedlist>

   </section>

   <section>
     <title>rc.DMZ.firewall.txt</title>

     <para>
     <mediaobject>
      <imageobject>
       <imagedata fileref="images/rc_DMZ_firewall.eps" format="eps">
      </imageobject>
      <imageobject>
       <imagedata fileref="images/rc_DMZ_firewall.jpg" format="jpg">
      </imageobject>
     </mediaobject>
    </para>

    <para>
The <ulink
url="http://iptables-tutorial.frozentux.net/scripts/rc.DMZ.firewall.txt">rc.DMZ.firewall.txt</ulink>
 script was written for those people out there that has one <systemitem>Trusted
Internal Network</systemitem>, one <systemitem>De-Militarized Zone</systemitem>
and one <systemitem>Internet Connection</systemitem>. The
<systemitem>De-Militarized Zone</systemitem> is in this case 1-to-1
<systemitem>NAT</systemitem>'ed and requires you to do some IP aliasing on your
firewall, ie, you must make the box recognise packets for more than one IP.
There are several ways to get this to work, one is to set 1-to-1
<systemitem>NAT</systemitem>, another one if you have a whole subnet is to
create a subnetwork, giving the firewall one IP both internally and externally.
You could then set the IP's to the <systemitem>DMZ</systemitem>'ed boxes as you
wish. Do note that this will "steal" two IP's for you, one for the broadcast
address and one for the network address. This is pretty much up to you to decide
and to implement, this tutorial will give you the tools to actually accomplish
the firewalling and <systemitem>NAT</systemitem>'ing part, but it will not tell
you exactly what you need to do since it is out of the scope of the tutorial.
    </para>

    <para>
    The rc.DMZ.firewall.txt script requires these options to be compiled into
your kernel, either statically or as modules. Without these options, at the very
least, available in your kernel, you will not be able to use this scripts
functionality. You may in other words get a lot of errors complaining about
modules and targets/jumps or matches missing. If you are planning to do traffic
control or any other things like that, you should see to it that you have all
the required options compiled into your kernel there as well.
    </para>

    <itemizedlist mark="opencircle">
     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_NETFILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_CONNTRACK
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_IPTABLES
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_LIMIT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_STATE
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_FILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_NAT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_TARGET_LOG
      </para>
     </listitem>
    </itemizedlist>

    <para>
You need to have two internal networks with this script as you can see from the
picture. One uses IP range 192.168.0.0/24 and consists of a <systemitem>Trusted
Internal Network</systemitem>. The other one uses IP range 192.168.1.0/24 and
consists of the <systemitem>De-Militarized Zone</systemitem> which we will do
1-to-1 <systemitem>NAT</systemitem> to. For example, if someone from the
internet sends a packet to our <varname>DNS_IP</varname>, then we use
<systemitem>DNAT</systemitem>, which stands for <systemitem>Destination Network
Adress Translation</systemitem>, to send the packet on to our
<systemitem>DNS</systemitem> on the <systemitem>DMZ</systemitem> network. When
the <systemitem>DNS</systemitem> sees our packet, the packet will be destined
for the actual <systemitem>DNS</systemitem> internal network IP, and not to our
external <systemitem>DNS</systemitem> IP. If the packet would not have been
translated, the <systemitem>DNS</systemitem> wouldn't have answered the packet.
We will show a short example of how the <systemitem>DNAT</systemitem> code
looks:
    </para>

    <para>
     <command>
$IPTABLES -t nat -A PREROUTING -p TCP -i $INET_IFACE -d $DNS_IP --dport 53 -j
DNAT --to-destination $DMZ_DNS_IP
     </command>
    </para>

    <para>
First of all, <systemitem>DNAT</systemitem> can only be performed in the
<systemitem>PREROUTING</systemitem> chain of the <systemitem>nat</systemitem>
table. Then we look for <systemitem>TCP</systemitem> protocol on our
<varname>$INET_IFACE</varname> with destination IP that matches our
<varname>$DNS_IP</varname>, and is directed to port 53, which is the
<systemitem>TCP</systemitem> port for zone transfers between
<systemitem>DNS</systemitem>'s. If we actually get such a packet we give a
target of <systemitem>DNAT</systemitem>, in other words <systemitem>Destination
NAT</systemitem>. After that we specify where we want the packet to go with the
<command>--to-destination</command> option and give it the value of
<varname>$DMZ_DNS_IP</varname>, in other words the IP of the
<systemitem>DNS</systemitem> on our <systemitem>DMZ</systemitem> network. This
is how basic <systemitem>DNAT</systemitem> works. When the reply to the
<systemitem>DNAT</systemitem>'ed packet is sent through the firewall, it
automatically gets un-DNAT'ed.
    </para>

    <para>
By now you should have enough understanding of how everything works to be able
to understand this script pretty well without any huge complications. If there
is something you don't understand, that hasn't been gone through in the rest of
the tutorial, mail me since it is probably a fault on my side.
    </para>

   </section>

   <section id="rcDHCPfirewalltxt">
    <title id="rcDHCPfirewalltxt.title">rc.DHCP.firewall.txt</title>

     <para> 
     <mediaobject>
      <imageobject>
       <imagedata fileref="images/rc_DHCP_firewall.eps" format="eps">
      </imageobject>
      <imageobject>
       <imagedata fileref="images/rc_DHCP_firewall.jpg" format="jpg">
      </imageobject>
     </mediaobject>
    </para>

    <para>
The <ulink
url="http://iptables-tutorial.frozentux.net/scripts/rc.DHCP.firewall.txt">rc.DHCP.firewall.txt</ulink>
 script is pretty much identical to the original <link linkend="rcfirewalltxt"
endterm="rcfirewalltxt.title"></link>. However, this script no longer uses the
<command>STATIC_IP</command> variable, which is the main change to the original
rc.firewall.txt script. The reason is that this won't work together with a
dynamic IP connection. The actual changes needed to be done to the original
script is minimal, however, I've had some people mail me and ask about the
problem so this script will be a good solution for you. This script will allow
people who uses <systemitem>DHCP</systemitem>, <systemitem>PPP</systemitem> and
<systemitem>SLIP</systemitem> connections to connect to the internet.
    </para>

    <para>
    The <filename>rc.DHCP.firewall.txt</filename> script requires the following
options to be compiled statically to the kernel, or as modules, as a bare
minimum to run properly.
    </para>

    <itemizedlist mark="opencircle">
     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_NETFILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_CONNTRACK
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_IPTABLES
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_LIMIT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_STATE
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_FILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_NAT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_TARGET_MASQUERADE
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_TARGET_LOG
      </para>
     </listitem>
    </itemizedlist>

    <para>
The main changes done to the script consists of erasing the
<varname>STATIC_IP</varname> variable as I already said and deleting all
referenses to this variable. Instead of using this variable the script now does
it's main filtering on the variable <varname>INET_IFACE</varname>. In other
words <command>-d $STATIC_IP</command> has been changed to <command>-i
$INET_IFACE</command>. This is pretty much the only changes made and that's all
that's needed really.
    </para>

    <para>
There is some more things to think about though. We can no longer filter in the
<systemitem>INPUT</systemitem> chain depending on, for example,
<command>--in-interface $LAN_IFACE --dst $INET_IP</command>. This in turn forces
us to filter only based on interfaces in such cases where the internal machines
must access the internet adressable IP. One great example is if we are running
an <systemitem>HTTP</systemitem> on our firewall. If we go to the main page,
which contains static links back to the same host, which could be some dyndns
solution, we would get a real hard trouble. The <systemitem>NAT</systemitem>'ed
box would ask the DNS for the IP of the <systemitem>HTTP</systemitem> server,
then try to access that IP. In case we filter based on interface and IP, the
<systemitem>NAT</systemitem>'ed box would be unable to get to the
<systemitem>HTTP</systemitem> because the <systemitem>INPUT</systemitem> chain
would <command>DROP</command> the packets flat to the ground. This also applies
in a sense to the case where we got a static IP, but in such cases it could be
gotten around by adding rules which checks the <systemitem>LAN</systemitem>
interface packets for our <varname>INET_IP</varname>, and if so
<command>ACCEPT</command> them.
    </para>

    <para>
As you may read from above, it may be a good idea to get a script, or
write one, that handles dynamic IP in a better sense. We could for example
make a script that grabs the IP from <command>ifconfig</command> and adds it to
a variable, upon bootup of the internet connection. A good way to do this, would
e to use for example the <filename>ip-up</filename> scripts provided with
<command>pppd</command> and some other programs. For a good site, check out the
linuxguruz.org iptables site which has a huge collection of scripts available to
download. You will find a link to the linuxguruz.org site from the <link linkend="otherresources"
endterm="otherresources.title"></link> appendix.
    </para>

    <note>
     <para>
This script might be a bit less secure than the
<filename>rc.firewall.txt</filename> script. I would definitely advise you to
use that script if at all possible since this script is more open to attacks
from the outside.
     </para>
    </note>

    <para>
    Also, there is the possibility to add something like this to your scripts:
    </para>

    <para>
    <command>
     INET_IP=`ifconfig $INET_IFACE | grep inet | cut -d : -f 2 | cut -d \  -f 1`
    </command>
    </para>

    <para>
    The above would automatically grab the <systemitem>IP address</systemitem>
of the <command>$INET_IFACE</command> variable, grep the correct line which
contains the <systemitem>IP address</systemitem> and then cuts it down
to a manageable <systemitem>IP address</systemitem>. For a more
elaborate way of doing this, you could apply the snippets of code available
within the <ulink url="scripts/retrieveip.txt">retreiveip.txt</ulink> script,
which will automatically grab your Internet IP address when you run the script.
Do note that this may in turn lead to a little bit of "weird" behaviours, such
as stalling connections to and from the firewall on the internal side. The
most common strange behaviours are described in the following list.

    </para>


    <orderedlist numeration="arabic">
     <listitem>
      <para>
      If the script is run from within a script which in turn is executed by,
for example, the <systemitem>PPP daemon</systemitem>, it will hang all currently
active connections due to the NEW not SYN rules (see the <link
linkend="newnotsyn" endterm="newnotsyn.title"></link> section). It is possible
to get by, if you get rid of the <systemitem>NEW not SYN</systemitem> rules for
example, but it is questionable.
      </para>
     </listitem>

     <listitem>
      <para>
     If you got rules that are static and always want to be around, it is
rather harsh to add and erase rules all the time, without hurting the already
existing ones. For example, if you want to block hosts on your
<systemitem>LAN</systemitem> to connect to the firewall, but at the same time
operate a script from the <systemitem>PPP daemon</systemitem>, how would you do
it without erasing your already active rules blocking the
<systemitem>LAN</systemitem>?

      </para>
     </listitem>

     <listitem>
      <para>
     It may get unnecessarily complicated, as seen above which in turn could
lead to security compromises. If the script is kept simple, it is easier to spot
problems, and to keep order in it.
      </para>
     </listitem>
    </orderedlist>

   </section>

   <section>
    <title>rc.UTIN.firewall.txt</title>

     <para>
     <mediaobject>
      <imageobject>
       <imagedata fileref="images/rc_UTIN_firewall.eps" format="eps">
      </imageobject>
      <imageobject>
       <imagedata fileref="images/rc_UTIN_firewall.jpg" format="jpg">
      </imageobject>
     </mediaobject>
    </para>

    <para>
    The <ulink
url="http://iptables-tutorial.frozentux.net/scripts/rc.UTIN.firewall.txt">rc.UTIN.firewall.txt</ulink>
 script will in contrast to the other scripts block the
<systemitem>LAN</systemitem> that is sitting behind us. In other words, we don't
trust anyone on any networks we are connected to. We also disallow people on our
<systemitem>LAN</systemitem> to do anything but specific tasks on the Internet.
The only things we actually allow is <systemitem>POP3</systemitem>,
<systemitem>HTTP</systemitem> and <systemitem>FTP</systemitem> access to the
internet. We also don't trust the internal users to access the firewall more
than we trust users on the Internet.
    </para>

    <para>
    The <filename>rc.UTIN.firewall.txt</filename> script requires the following
options to be compiled statically to the kernel, or as modules. Without one or
more of these, the script will become more or less flawed since parts of the
scripts required functionalities will be unusable. As you change the script you
use, you could possibly need more options to be compiled into your kernel
depending on what you want to use.
    </para>

    <itemizedlist mark="opencircle">
     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_PACKET
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_NETFILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_CONNTRACK
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_IPTABLES
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_LIMIT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_MATCH_STATE
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_FILTER
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_NAT
      </para>
     </listitem>

     <listitem>
      <para>
      CONFIG_IP_NF_TARGET_LOG
      </para>
     </listitem>
    </itemizedlist>

    <para>
    This script follows the golden rule to not trust anyone, not
even our own employees. This is a sad fact, but a large part of the hacks and
cracks that a company gets hit by is a matter of people from their own staff
perpetrating the hit. This script will hopefully give you some clues as to what
you can do with your firewall to strengthen it up. It's not very different from
the original <filename>rc.firewall.txt</filename> script, but it does give a few
hints at what we would normally let through etc.
    </para>
   </section>

   <section id="rctest-iptablestxt">
    <title id="rctest-iptablestxt.title">rc.test-iptables.txt</title>

    <para>
The <ulink
url="http://iptables-tutorial.frozentux.net/scripts/rc.test-iptables.txt">rc.test-iptables.txt</ulink>
 script can be used to test all the different chains, but it might need some
tweaking depending on your configuration, such as turning on
<command>ip_forwarding</command>, and setting up
<systemitem>masquerading</systemitem> etcetera. It will work for mostly everyone
though who has all the basic set up and all the basic tables loaded into kernel.
All it really does is set some <command>LOG</command> targets which will log
ping reply's and ping requests. This way, you will get information on which
chain was traversed and in which order. For example, run this script and then
do:

    </para>
    <para>
<command>ping -c 1 host.on.the.internet</command>
    </para>
    <para>
And <command>tail -n 0 -f /var/log/messages</command> while doing the first
command. This should show you all the different chains used and in which order,
unless the log entries are swapped around for some reason.
    </para>
    <note>
     <para>
This script was written for testing purposes only. In other words,
it's not a good idea to have rules like this that logs everything of one sort
since your log partitions might get filled up quickly and it would be an
effective Denial of Service attack against you and might lead to real attacks on
you that would be unlogged after the initial Denial of Service attack.
     </para>
    </note>
   </section>

   <section>
    <title>rc.flush-iptables.txt</title>

    <para>
The <ulink
url="http://iptables-tutorial.frozentux.net/scripts/rc.flush-iptables.txt">rc.flush-iptables.txt</ulink>
 script should not really be called a script in itself. The <ulink
url="http://iptables-tutorial.frozentux.net/scripts/rc.flush-iptables.txt">rc.flush-iptables.txt</ulink>
 script will reset and flush all 
your tables and chains. The script starts by setting the default policies to
<command>ACCEPT</command> on the <systemitem>INPUT</systemitem>,
<systemitem>OUTPUT</systemitem> and <systemitem>FORWARD</systemitem> chains of
the <systemitem>filter</systemitem> table. After this we reset the default
policies of the <systemitem>PREROUTING</systemitem>,
<systemitem>POSTROUTING</systemitem> and <systemitem>OUTPUT</systemitem> chains
of the <systemitem>nat</systemitem> table. We do this first so we won't have to
bother about closed connections and packets not getting through. This script is
intended for actually setting up and troubleshooting your firewall, and hence we
only care about opening the whole thing up and reset it to default values.

    </para>

    <para>
After this we flush all chains first in the <systemitem>filter</systemitem>
table and then in the <systemitem>NAT</systemitem> table. This way we know there
is no redundant rules lying around anywhere. When all of this is done, we jump
down to the next section where we erase all the user specified chains in the
<systemitem>NAT</systemitem> and <systemitem>filter</systemitem> tables. When
this step is done, we consider the script done. You may consider adding rules
to flush your <systemitem>MANGLE</systemitem> table if you use it.
    </para>

    <note>
     <para>
     One final word on this issue. Certain people has mailed me asking from me to
put this script into the original rc.firewall script using redhat Linux syntax
where you type something like rc.firewall start and the script starts. However,
I will not do that since this is a tutorial and should be used as a place to
fetch ideas mainly and it shouldn't be filled up with shell scripts and
strange syntax. Adding shell script syntax and other things makes the script
harder to read as far as I am concerned and the tutorial was written with
readability in mind and will continue being so.
     </para>
    </note>
   </section>
 </chapter>




